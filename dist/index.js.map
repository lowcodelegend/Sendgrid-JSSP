{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import \"@k2oss/k2-broker-core\";\r\n\r\nmetadata = {\r\n  systemName: \"com.demo.sendgrid.email\",\r\n  displayName: \"SendGrid Email Broker (HTTP)\",\r\n  description: \"Sends emails using the SendGrid Web API directly.\",\r\n  configuration: {\r\n    apiKey: {\r\n      displayName: \"SendGrid API Key\",\r\n      type: \"string\",\r\n      required: true\r\n    }\r\n  }\r\n};\r\n\r\nondescribe = async function () {\r\n  postSchema({\r\n    objects: {\r\n      email: {\r\n        displayName: \"Email\",\r\n        description: \"An email message to send via SendGrid.\",\r\n        properties: {\r\n          to: { displayName: \"To\", type: \"string\" },\r\n          from: { displayName: \"From\", type: \"string\" },\r\n          subject: { displayName: \"Subject\", type: \"string\" },\r\n          text: { displayName: \"Text Body\", type: \"string\" },\r\n          html: { displayName: \"HTML Body\", type: \"string\" },\r\n          status: { displayName: \"Status\", type: \"string\" }\r\n        },\r\n        methods: {\r\n          send: {\r\n            displayName: \"Send Email\",\r\n            type: \"create\",\r\n            inputs: [\"to\", \"from\", \"subject\", \"text\", \"html\"],\r\n            outputs: [\"status\"]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nonexecute = async function ({\r\n  objectName,\r\n  methodName,\r\n  properties,\r\n  parameters,\r\n  configuration\r\n}) {\r\n  switch (objectName) {\r\n    case \"email\":\r\n      await onexecuteEmail(methodName, properties, configuration);\r\n      break;\r\n    default:\r\n      throw new Error(\"Object '\" + objectName + \"' not supported.\");\r\n  }\r\n};\r\n\r\nasync function onexecuteEmail(\r\n  methodName: string,\r\n  properties: SingleRecord,\r\n  configuration: SingleRecord\r\n): Promise<void> {\r\n  switch (methodName) {\r\n    case \"send\":\r\n      await onexecuteEmailSend(properties, configuration);\r\n      break;\r\n    default:\r\n      throw new Error(\"Method '\" + methodName + \"' is not supported.\");\r\n  }\r\n}\r\n\r\nasync function onexecuteEmailSend(\r\n  properties: SingleRecord,\r\n  configuration: SingleRecord\r\n): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    const url = \"https://api.sendgrid.com/v3/mail/send\";\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", url);\r\n\r\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + String(configuration.apiKey));\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n\r\n    const body = {\r\n      personalizations: [\r\n        {\r\n          to: [{ email: properties.to }],\r\n          subject: properties.subject\r\n        }\r\n      ],\r\n      from: { email: properties.from },\r\n      content: [\r\n        { type: \"text/plain\", value: properties.text || \"\" }\r\n      ]\r\n    };\r\n\r\n    // Add HTML if provided\r\n    if (properties.html) {\r\n      body.content.push({ type: \"text/html\", value: properties.html });\r\n    }\r\n\r\n    xhr.onreadystatechange = function () {\r\n      if (xhr.readyState !== 4) return;\r\n      try {\r\n        if (xhr.status >= 200 && xhr.status < 300) {\r\n          postResult({\r\n            status: String(xhr.status)\r\n          });\r\n          resolve();\r\n        } else {\r\n          reject(\r\n            new Error(\r\n              \"SendGrid send failed: \" + xhr.status + \" - \" + xhr.responseText\r\n            )\r\n          );\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n\r\n    xhr.send(JSON.stringify(body));\r\n  });\r\n}\r\n"],"names":["objectName","methodName","properties","parameters","configuration","onexecuteEmail","onexecuteEmailSend","resolve","reject","url","xhr","body","e"],"mappings":"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"}